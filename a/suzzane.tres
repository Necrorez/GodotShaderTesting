[gd_resource type="VisualShader" load_steps=70 format=2]

[ext_resource path="res://a/cloud.tres" type="Texture" id=1]

[sub_resource type="VisualShaderNodeInput" id=17]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarUniform" id=19]
output_port_for_preview = 0
uniform_name = "time_scale"
hint = 1
max = 10.0
default_value_enabled = true
default_value = 0.2

[sub_resource type="VisualShaderNodeScalarOp" id=32]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeInput" id=14]
output_port_for_preview = 0
input_name = "vertex"

[sub_resource type="VisualShaderNodeScalarOp" id=33]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarConstant" id=36]
constant = 1.1

[sub_resource type="VisualShaderNodeVectorDecompose" id=37]

[sub_resource type="VisualShaderNodeVectorCompose" id=38]

[sub_resource type="VisualShaderNodeVectorScalarMix" id=39]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeVectorOp" id=40]
output_port_for_preview = 0
operator = 5

[sub_resource type="VisualShaderNodeVectorOp" id=41]
output_port_for_preview = 0
operator = 5

[sub_resource type="OpenSimplexNoise" id=42]
persistence = 0.0

[sub_resource type="NoiseTexture" id=43]
seamless = true
noise = SubResource( 42 )

[sub_resource type="VisualShaderNodeTexture" id=44]
output_port_for_preview = 0
texture = SubResource( 43 )

[sub_resource type="VisualShaderNodeTexture" id=15]
output_port_for_preview = 0
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=45]
output_port_for_preview = 0
operator = 2

[sub_resource type="OpenSimplexNoise" id=46]
period = 87.9
persistence = 0.409

[sub_resource type="NoiseTexture" id=47]
noise = SubResource( 46 )

[sub_resource type="VisualShaderNodeTexture" id=48]
output_port_for_preview = 0
texture = SubResource( 47 )

[sub_resource type="VisualShaderNodeVectorSmoothStep" id=49]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeVectorFunc" id=50]
output_port_for_preview = 0
function = 34

[sub_resource type="VisualShaderNodeColorUniform" id=51]
uniform_name = "burned_color1"
default_value_enabled = true
default_value = Color( 0.558875, 0.558875, 0.558875, 1 )

[sub_resource type="VisualShaderNodeColorUniform" id=52]
uniform_name = "burned_color2"
default_value_enabled = true
default_value = Color( 0.0472645, 0.0250531, 0.0250531, 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=53]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=54]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=55]
output_port_for_preview = 0

[sub_resource type="OpenSimplexNoise" id=23]
seed = 263
period = 110.6
persistence = 0.0

[sub_resource type="NoiseTexture" id=24]
width = 1080
height = 1080
seamless = true
as_normalmap = true
noise = SubResource( 23 )

[sub_resource type="VisualShaderNodeTexture" id=25]
output_port_for_preview = 0
texture = SubResource( 24 )

[sub_resource type="VisualShaderNodeVectorFunc" id=56]
output_port_for_preview = 0
function = 26

[sub_resource type="VisualShaderNodeVectorOp" id=57]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=58]
uniform_name = "burned_color3"
default_value_enabled = true
default_value = Color( 0.142208, 0.142208, 0.142208, 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=59]
output_port_for_preview = 0

[sub_resource type="Gradient" id=60]
offsets = PoolRealArray( 0, 0.147971, 0.312649 )
colors = PoolColorArray( 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1 )

[sub_resource type="GradientTexture" id=61]
gradient = SubResource( 60 )

[sub_resource type="VisualShaderNodeTexture" id=62]
output_port_for_preview = 0
texture = SubResource( 61 )

[sub_resource type="VisualShaderNodeInput" id=63]
output_port_for_preview = 0
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorDecompose" id=64]
output_port_for_preview = 1

[sub_resource type="VisualShaderNodeScalarOp" id=65]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarUniform" id=66]
uniform_name = "disolve"
hint = 1
max = 2.0
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShaderNodeVectorOp" id=26]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=67]
output_port_for_preview = 0
function = 31

[sub_resource type="VisualShaderNodeVectorOp" id=68]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeVectorFunc" id=69]
output_port_for_preview = 0
function = 26

[sub_resource type="VisualShaderNodeVectorFunc" id=70]
output_port_for_preview = 0
function = 34

[sub_resource type="VisualShaderNodeVectorOp" id=71]
output_port_for_preview = 0
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=72]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 5.46 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=73]
output_port_for_preview = 0
function = 15

[sub_resource type="VisualShaderNodeColorUniform" id=74]
output_port_for_preview = 0
uniform_name = "base_color"
default_value_enabled = true
default_value = Color( 1, 0, 0, 1 )

[sub_resource type="VisualShaderNodeScalarUniform" id=27]
uniform_name = "distortion"
hint = 2
max = 5.0
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeScalarOp" id=77]
default_input_values = [ 0, 0.0, 1, 5.46 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=79]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeVectorFunc" id=80]
output_port_for_preview = 0
function = 34

[sub_resource type="VisualShaderNodeScalarOp" id=84]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=85]
output_port_for_preview = 0
function = 15

[sub_resource type="VisualShaderNodeColorUniform" id=28]
uniform_name = "hot"
default_value_enabled = true
default_value = Color( 1, 0, 0, 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=86]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeExpression" id=87]
output_port_for_preview = 0
size = Vector2( 502.411, 372.724 )
expression = "if (input0.r >= 0.01){
output0 = input1;
}"

[sub_resource type="VisualShaderNodeExpression" id=88]
output_port_for_preview = 0
size = Vector2( 502.411, 372.724 )
expression = "if (input0.r >= 0.01){
output0 = input1;
}"

[sub_resource type="VisualShaderNodeVectorOp" id=89]
output_port_for_preview = 0
operator = 6

[sub_resource type="VisualShaderNodeVectorOp" id=90]
output_port_for_preview = 0
operator = 1

[sub_resource type="VisualShaderNodeVectorOp" id=91]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 2 ) ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=92]
output_port_for_preview = 0
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=93]
function = 2

[sub_resource type="VisualShaderNodeScalarOp" id=94]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=29]
uniform_name = "warm"
default_value_enabled = true
default_value = Color( 0.964018, 1, 0, 1 )

[sub_resource type="VisualShaderNodeScalarFunc" id=95]
function = 31

[sub_resource type="VisualShaderNodeVectorOp" id=30]

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible, world_vertex_coords;

uniform vec4 hot : hint_color = vec4(1.000000, 0.000000, 0.000000, 1.000000);
uniform vec4 warm : hint_color = vec4(0.964018, 1.000000, 0.000000, 1.000000);
uniform sampler2D tex_frg_4;
uniform float distortion : hint_range(0, 5, 0.1) = 1;
uniform float time_scale : hint_range(0, 10) = 0.2;
uniform sampler2D tex_frg_3;
uniform float disolve : hint_range(0, 2) = 0.5;
uniform sampler2D tex_frg_45;
uniform vec4 base_color : hint_color = vec4(1.000000, 0.000000, 0.000000, 1.000000);
uniform sampler2D tex_frg_29;
uniform sampler2D tex_frg_31;
uniform vec4 burned_color3 : hint_color = vec4(0.142208, 0.142208, 0.142208, 1.000000);
uniform vec4 burned_color1 : hint_color = vec4(0.558875, 0.558875, 0.558875, 1.000000);
uniform vec4 burned_color2 : hint_color = vec4(0.047265, 0.025053, 0.025053, 1.000000);



void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:7
	vec3 n_out7p0 = hot.rgb;
	float n_out7p1 = hot.a;

// ColorUniform:8
	vec3 n_out8p0 = warm.rgb;
	float n_out8p1 = warm.a;

// Texture:4
	vec4 tex_frg_4_read = texture(tex_frg_4, UV.xy);
	vec3 n_out4p0 = tex_frg_4_read.rgb;
	float n_out4p1 = tex_frg_4_read.a;

// Input:2
	vec3 n_out2p0 = VERTEX;

// ScalarUniform:6
	float n_out6p0 = distortion;

// VectorOp:9
	vec3 n_out9p0 = n_out2p0 + vec3(n_out6p0);

// VectorOp:5
	vec3 n_out5p0 = n_out4p0 * n_out9p0;

// VectorDecompose:24
	float n_out24p0 = n_out5p0.x;
	float n_out24p1 = n_out5p0.y;
	float n_out24p2 = n_out5p0.z;

// Input:11
	float n_out11p0 = TIME;

// ScalarUniform:13
	float n_out13p0 = time_scale;

// ScalarOp:19
	float n_out19p0 = n_out11p0 * n_out13p0;

// ScalarOp:20
	float n_out20p0 = n_out24p1 + n_out19p0;

// VectorCompose:25
	vec3 n_out25p0 = vec3(n_out24p0, n_out20p0, n_out24p2);

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, n_out25p0.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// VectorScalarMix:26
	vec3 n_out26p0 = mix(n_out7p0, n_out8p0, dot(n_out3p0, vec3(0.333333, 0.333333, 0.333333)));

// Scalar:23
	float n_out23p0 = 1.100000;

// VectorOp:27
	vec3 n_out27p0 = pow(n_out26p0, vec3(n_out23p0));

// VectorOp:28
	vec3 n_out28p0 = pow(n_out27p0, vec3(n_out23p0));

// Input:46
	vec3 n_out46p0 = VERTEX;

// VectorDecompose:47
	float n_out47p0 = n_out46p0.x;
	float n_out47p1 = n_out46p0.y;
	float n_out47p2 = n_out46p0.z;

// ScalarUniform:49
	float n_out49p0 = disolve;

// Input:77
	float n_out77p0 = TIME;

// ScalarFunc:78
	float n_out78p0 = tan(n_out77p0);

// ScalarOp:79
	float n_out79p0 = n_out49p0 * n_out78p0;

// ScalarFunc:80
	float n_out80p0 = 1.0 - n_out79p0;

// ScalarOp:48
	float n_out48p0 = n_out47p1 + n_out80p0;

// ScalarFunc:50
	float n_out50p0 = 1.0 - n_out48p0;

// Texture:45
	vec4 tex_frg_45_read = texture(tex_frg_45, vec3(n_out50p0).xy);
	vec3 n_out45p0 = tex_frg_45_read.rgb;
	float n_out45p1 = tex_frg_45_read.a;

// VectorOp:76
	vec3 n_in76p1 = vec3(2.00000, 2.00000, 2.00000);
	vec3 n_out76p0 = n_out45p0 * n_in76p1;

// VectorOp:51
	vec3 n_out51p0 = n_out28p0 * n_out76p0;

// ScalarOp:68
	float n_in68p1 = 0.50000;
	float n_out68p0 = n_out48p0 * n_in68p1;

// ScalarFunc:69
	float n_out69p0 = round(n_out68p0);

// ScalarOp:60
	float n_in60p1 = 5.46000;
	float n_out60p0 = dot(n_out45p0, vec3(0.333333, 0.333333, 0.333333)) * n_in60p1;

// VectorFunc:52
	vec3 n_out52p0 = roundEven(vec3(n_out60p0));

// VectorFunc:53
	vec3 n_out53p0 = vec3(1.0, 1.0, 1.0) - n_out52p0;

// ScalarOp:70
	float n_out70p0 = n_out69p0 * dot(n_out53p0, vec3(0.333333, 0.333333, 0.333333));

// ColorUniform:57
	vec3 n_out57p0 = base_color.rgb;
	float n_out57p1 = base_color.a;

// Expression:71
	vec3 n_out71p0;
	n_out71p0 = vec3(0.0, 0.0, 0.0);
	{
		if (vec3(n_out70p0).r >= 0.01){
		n_out71p0 = n_out57p0;
		}
	}

// ScalarOp:55
	float n_in55p1 = 5.46000;
	float n_out55p0 = n_out50p0 * n_in55p1;

// ScalarFunc:56
	float n_out56p0 = round(n_out55p0);

// VectorOp:54
	vec3 n_out54p0 = vec3(n_out56p0) - n_out53p0;

// Texture:29
	vec4 tex_frg_29_read = texture(tex_frg_29, UV.xy);
	vec3 n_out29p0 = tex_frg_29_read.rgb;
	float n_out29p1 = tex_frg_29_read.a;

// Texture:31
	vec4 tex_frg_31_read = texture(tex_frg_31, UV.xy);
	vec3 n_out31p0 = tex_frg_31_read.rgb;
	float n_out31p1 = tex_frg_31_read.a;

// VectorOp:30
	vec3 n_out30p0 = n_out29p0 * n_out31p0;

// VectorSmoothStep:33
	vec3 n_out33p0 = smoothstep(n_out30p0, n_out31p0, n_out29p0);

// VectorFunc:34
	vec3 n_out34p0 = vec3(1.0, 1.0, 1.0) - n_out33p0;

// VectorFunc:40
	vec3 n_out40p0 = roundEven(n_out34p0);

// ColorUniform:42
	vec3 n_out42p0 = burned_color3.rgb;
	float n_out42p1 = burned_color3.a;

// VectorOp:41
	vec3 n_out41p0 = n_out40p0 * n_out42p0;

// ColorUniform:35
	vec3 n_out35p0 = burned_color1.rgb;
	float n_out35p1 = burned_color1.a;

// VectorOp:38
	vec3 n_out38p0 = n_out34p0 * n_out35p0;

// VectorOp:43
	vec3 n_out43p0 = n_out41p0 + n_out38p0;

// ColorUniform:36
	vec3 n_out36p0 = burned_color2.rgb;
	float n_out36p1 = burned_color2.a;

// VectorOp:37
	vec3 n_out37p0 = n_out33p0 * n_out36p0;

// VectorOp:39
	vec3 n_out39p0 = n_out43p0 + n_out37p0;

// Expression:73
	vec3 n_out73p0;
	n_out73p0 = vec3(0.0, 0.0, 0.0);
	{
		if (n_out54p0.r >= 0.01){
		n_out73p0 = n_out39p0;
		}
	}

// VectorOp:63
	vec3 n_out63p0 = n_out71p0 + n_out73p0;

// VectorOp:75
	vec3 n_out75p0 = n_out63p0 - n_out76p0;

// VectorOp:74
	vec3 n_out74p0 = max(n_out51p0, n_out75p0);

// Output:0
	ALBEDO = n_out74p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -847.689, -515.596 )
flags/world_vertex_coords = true
nodes/vertex/0/position = Vector2( 1660, 100 )
nodes/fragment/0/position = Vector2( 3880, -120 )
nodes/fragment/2/node = SubResource( 14 )
nodes/fragment/2/position = Vector2( -1640, 260 )
nodes/fragment/3/node = SubResource( 15 )
nodes/fragment/3/position = Vector2( -1640, 500 )
nodes/fragment/4/node = SubResource( 25 )
nodes/fragment/4/position = Vector2( -1660, 860 )
nodes/fragment/5/node = SubResource( 26 )
nodes/fragment/5/position = Vector2( -1220, 920 )
nodes/fragment/6/node = SubResource( 27 )
nodes/fragment/6/position = Vector2( -1860, 1320 )
nodes/fragment/7/node = SubResource( 28 )
nodes/fragment/7/position = Vector2( -1020, 140 )
nodes/fragment/8/node = SubResource( 29 )
nodes/fragment/8/position = Vector2( -1020, 300 )
nodes/fragment/9/node = SubResource( 30 )
nodes/fragment/9/position = Vector2( -1320, 1280 )
nodes/fragment/11/node = SubResource( 17 )
nodes/fragment/11/position = Vector2( -1520, 1540 )
nodes/fragment/13/node = SubResource( 19 )
nodes/fragment/13/position = Vector2( -1620, 1640 )
nodes/fragment/19/node = SubResource( 32 )
nodes/fragment/19/position = Vector2( -1040, 1540 )
nodes/fragment/20/node = SubResource( 33 )
nodes/fragment/20/position = Vector2( -420, 1200 )
nodes/fragment/23/node = SubResource( 36 )
nodes/fragment/23/position = Vector2( -640, 640 )
nodes/fragment/24/node = SubResource( 37 )
nodes/fragment/24/position = Vector2( -900, 1160 )
nodes/fragment/25/node = SubResource( 38 )
nodes/fragment/25/position = Vector2( 0, 1020 )
nodes/fragment/26/node = SubResource( 39 )
nodes/fragment/26/position = Vector2( -540, 240 )
nodes/fragment/27/node = SubResource( 40 )
nodes/fragment/27/position = Vector2( -260, 340 )
nodes/fragment/28/node = SubResource( 41 )
nodes/fragment/28/position = Vector2( 120, 400 )
nodes/fragment/29/node = SubResource( 44 )
nodes/fragment/29/position = Vector2( 1160, -1060 )
nodes/fragment/30/node = SubResource( 45 )
nodes/fragment/30/position = Vector2( 1720, -1060 )
nodes/fragment/31/node = SubResource( 48 )
nodes/fragment/31/position = Vector2( 1420, -800 )
nodes/fragment/33/node = SubResource( 49 )
nodes/fragment/33/position = Vector2( 2040, -1020 )
nodes/fragment/34/node = SubResource( 50 )
nodes/fragment/34/position = Vector2( 2020, -800 )
nodes/fragment/35/node = SubResource( 51 )
nodes/fragment/35/position = Vector2( 2260, -1360 )
nodes/fragment/36/node = SubResource( 52 )
nodes/fragment/36/position = Vector2( 2280, -1200 )
nodes/fragment/37/node = SubResource( 53 )
nodes/fragment/37/position = Vector2( 2600, -1100 )
nodes/fragment/38/node = SubResource( 54 )
nodes/fragment/38/position = Vector2( 2420, -840 )
nodes/fragment/39/node = SubResource( 55 )
nodes/fragment/39/position = Vector2( 2880, -960 )
nodes/fragment/40/node = SubResource( 56 )
nodes/fragment/40/position = Vector2( 2120, -580 )
nodes/fragment/41/node = SubResource( 57 )
nodes/fragment/41/position = Vector2( 2360, -620 )
nodes/fragment/42/node = SubResource( 58 )
nodes/fragment/42/position = Vector2( 1880, -1300 )
nodes/fragment/43/node = SubResource( 59 )
nodes/fragment/43/position = Vector2( 2660, -780 )
nodes/fragment/45/node = SubResource( 62 )
nodes/fragment/45/position = Vector2( 1460, -60 )
nodes/fragment/46/node = SubResource( 63 )
nodes/fragment/46/position = Vector2( 60, -20 )
nodes/fragment/47/node = SubResource( 64 )
nodes/fragment/47/position = Vector2( 380, 60 )
nodes/fragment/48/node = SubResource( 65 )
nodes/fragment/48/position = Vector2( 900, 120 )
nodes/fragment/49/node = SubResource( 66 )
nodes/fragment/49/position = Vector2( 340, 460 )
nodes/fragment/50/node = SubResource( 67 )
nodes/fragment/50/position = Vector2( 1120, 280 )
nodes/fragment/51/node = SubResource( 68 )
nodes/fragment/51/position = Vector2( 1811.48, -225.207 )
nodes/fragment/52/node = SubResource( 69 )
nodes/fragment/52/position = Vector2( 1940, 180 )
nodes/fragment/53/node = SubResource( 70 )
nodes/fragment/53/position = Vector2( 2120, 300 )
nodes/fragment/54/node = SubResource( 71 )
nodes/fragment/54/position = Vector2( 2340, 480 )
nodes/fragment/55/node = SubResource( 72 )
nodes/fragment/55/position = Vector2( 1360, 280 )
nodes/fragment/56/node = SubResource( 73 )
nodes/fragment/56/position = Vector2( 1580, 360 )
nodes/fragment/57/node = SubResource( 74 )
nodes/fragment/57/position = Vector2( 2520, 740 )
nodes/fragment/60/node = SubResource( 77 )
nodes/fragment/60/position = Vector2( 1683.39, 214.035 )
nodes/fragment/63/node = SubResource( 79 )
nodes/fragment/63/position = Vector2( 3160, -220 )
nodes/fragment/64/node = SubResource( 80 )
nodes/fragment/64/position = Vector2( 2540, -460 )
nodes/fragment/68/node = SubResource( 84 )
nodes/fragment/68/position = Vector2( 2180, -80 )
nodes/fragment/69/node = SubResource( 85 )
nodes/fragment/69/position = Vector2( 2380, -220 )
nodes/fragment/70/node = SubResource( 86 )
nodes/fragment/70/position = Vector2( 2700, -280 )
nodes/fragment/71/node = SubResource( 87 )
nodes/fragment/71/position = Vector2( 2980, 520 )
nodes/fragment/71/size = Vector2( 502.411, 372.724 )
nodes/fragment/71/input_ports = "0,1,input0;1,1,input1;"
nodes/fragment/71/output_ports = "0,1,output0;"
nodes/fragment/71/expression = "if (input0.r >= 0.01){
output0 = input1;
}"
nodes/fragment/73/node = SubResource( 88 )
nodes/fragment/73/position = Vector2( 3420, -540 )
nodes/fragment/73/size = Vector2( 502.411, 372.724 )
nodes/fragment/73/input_ports = "0,1,input0;1,1,input1;"
nodes/fragment/73/output_ports = "0,1,output0;"
nodes/fragment/73/expression = "if (input0.r >= 0.01){
output0 = input1;
}"
nodes/fragment/74/node = SubResource( 89 )
nodes/fragment/74/position = Vector2( 3320, -20 )
nodes/fragment/75/node = SubResource( 90 )
nodes/fragment/75/position = Vector2( 3100, 80 )
nodes/fragment/76/node = SubResource( 91 )
nodes/fragment/76/position = Vector2( 1714.99, 7.9405 )
nodes/fragment/77/node = SubResource( 92 )
nodes/fragment/77/position = Vector2( 600, 660 )
nodes/fragment/78/node = SubResource( 93 )
nodes/fragment/78/position = Vector2( 680, 580 )
nodes/fragment/79/node = SubResource( 94 )
nodes/fragment/79/position = Vector2( 720, 380 )
nodes/fragment/80/node = SubResource( 95 )
nodes/fragment/80/position = Vector2( 934.583, 509.034 )
nodes/fragment/connections = PoolIntArray( 4, 0, 5, 0, 6, 0, 9, 1, 9, 0, 5, 1, 11, 0, 19, 0, 13, 0, 19, 1, 19, 0, 20, 1, 5, 0, 24, 0, 24, 1, 20, 0, 20, 0, 25, 1, 24, 0, 25, 0, 24, 2, 25, 2, 25, 0, 3, 0, 7, 0, 26, 0, 8, 0, 26, 1, 3, 0, 26, 2, 26, 0, 27, 0, 23, 0, 27, 1, 27, 0, 28, 0, 23, 0, 28, 1, 2, 0, 9, 0, 29, 0, 30, 0, 31, 0, 30, 1, 30, 0, 33, 0, 29, 0, 33, 2, 31, 0, 33, 1, 33, 0, 34, 0, 33, 0, 37, 0, 34, 0, 38, 0, 37, 0, 39, 1, 36, 0, 37, 1, 35, 0, 38, 1, 34, 0, 40, 0, 40, 0, 41, 0, 42, 0, 41, 1, 41, 0, 43, 0, 38, 0, 43, 1, 43, 0, 39, 0, 48, 0, 50, 0, 50, 0, 45, 0, 28, 0, 51, 0, 52, 0, 53, 0, 50, 0, 55, 0, 55, 0, 56, 0, 45, 0, 60, 0, 60, 0, 52, 0, 47, 1, 48, 0, 46, 0, 47, 0, 54, 0, 64, 0, 48, 0, 68, 0, 68, 0, 69, 0, 69, 0, 70, 0, 53, 0, 70, 1, 57, 0, 71, 1, 71, 0, 63, 0, 39, 0, 73, 1, 73, 0, 63, 1, 74, 0, 0, 0, 63, 0, 75, 0, 51, 0, 74, 0, 75, 0, 74, 1, 45, 0, 76, 0, 76, 0, 51, 1, 76, 0, 75, 1, 53, 0, 54, 1, 56, 0, 54, 0, 77, 0, 78, 0, 49, 0, 79, 0, 78, 0, 79, 1, 54, 0, 73, 0, 70, 0, 71, 0, 79, 0, 80, 0, 80, 0, 48, 1 )
